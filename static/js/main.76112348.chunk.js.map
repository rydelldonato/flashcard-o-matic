{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Home.js","Layout/FlipCard.js","Layout/Study.js","Layout/CreateDeck.js","Layout/DeckScreen.js","Layout/EditDeck.js","Layout/Form.js","Layout/AddCard.js","Layout/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updateCard","updatedCard","Home","history","useHistory","useState","deckList","setDeckList","useEffect","data","log","getDeckListData","onClick","push","map","length","description","viewDeckURL","HandleViewButton","studyDeckURL","HandleStudyButton","window","confirm","location","reload","style","float","append","FlipCard","props","sortedCards","sort","cardA","cardB","useParams","front","back","currentCard","setCurrentCard","currentCardIndex","setCurrentCardIndex","displayedCardIndex","setDisplayedCardIndex","cardIsFlipped","setCardIsFlipped","endOfCardDeck","setEndOfCardDeck","resetEndOfDeckToInitialState","changeRouteOnConfirmation","currentIndex","currentDisplayedIndex","Study","flipped","studyDeck","setStudyDeck","getStudyDeck","fontSize","to","CreateDeck","initialDeckState","setDeck","HandleDeckChange","target","value","onSubmit","event","preventDefault","createDeck","then","htmlFor","required","type","placeholder","onChange","DeckScreen","currentDeck","setCurrentDeck","HandleDeleteCardButton","deleteCard","getCurrentDeck","HandleEditDeckButton","HandleAddButton","HandleDeleteDeckButton","marginLeft","HandleEditCardButton","EditDeck","initialFormState","setForm","HandleFormChange","updateDeck","Form","formTitle","HandleSubmit","HandleDoneButton","handleFormChange","formPlaceholderOne","formPlaceholderTwo","formValueOne","formValueTwo","buttonName","defaultValue","AddCard","currentForm","setCurrentForm","createCard","formLabelOne","formLabelTwo","EditCard","readCard","catch","err","HandleSubmitChange","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76112348.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return <h1>Not Found</h1>;\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import { useHistory } from \"react-router-dom\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { listDecks } from \"../utils/api\";\r\nimport { deleteDeck } from \"../utils/api\";\r\n\r\nexport default function Home() {\r\n  const history = useHistory();\r\n  const [deckList, setDeckList] = useState([]);\r\n\r\n  function HandleViewButton(deckId) {\r\n    const viewDeckURL = `/decks/${deckId}`;\r\n    history.push(viewDeckURL);\r\n  }\r\n  function HandleStudyButton(deckId) {\r\n    const studyDeckURL = `/decks/${deckId}/study`;\r\n    history.push(studyDeckURL);\r\n  }\r\n  function HandleDeleteButton(deckId) {\r\n    const message = `Delete this deck?\\n\\nYou will not be able to recover it.`;\r\n    if (window.confirm(message)) {\r\n      deleteDeck(deckId);\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  function HandleCreateButton() {\r\n    const createDeckURL = \"/decks/new\";\r\n    history.push(createDeckURL);\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function getDeckListData() {\r\n      try{\r\n        const data = await listDecks();\r\n        setDeckList(data);\r\n      }\r\n      catch(error){\r\n        console.log(error);\r\n      }\r\n    }\r\n    getDeckListData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/*on click take user to create deck screen*/}\r\n      <div id=\"create-deck-button\" className=\"mb-2\">\r\n        <button\r\n          onClick={() => HandleCreateButton()}\r\n          className=\"btn btn-secondary\"\r\n        >\r\n          +Create Deck\r\n        </button>\r\n      </div>\r\n      <ul className=\"list-group\">\r\n        {deckList.map((deck) => (\r\n          <li key={deck.id} className=\"list-group-item\">\r\n            <div\r\n              id=\"deck-header\"\r\n              className=\"d-flex flex-row justify-content-between\"\r\n            >\r\n              <h5 className=\"p-2\">{deck.name}</h5>\r\n              <p className=\"p-2\">{deck.cards.length} cards</p>\r\n            </div>\r\n            <div id=\"deck-description\" className=\"d-flex flex-row\">\r\n              <p className=\"p-2\">{deck.description}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => HandleViewButton(deck.id)}\r\n              className=\"btn btn-secondary\"\r\n            >\r\n              👁️View\r\n            </button>\r\n            <button\r\n              onClick={() => HandleStudyButton(deck.id)}\r\n              className=\"btn btn-primary m-2\"\r\n            >\r\n              📖Study\r\n            </button>\r\n            <button\r\n              onClick={() => HandleDeleteButton(deck.id)}\r\n              style={{ float: \"right\" }}\r\n              className=\"btn btn-danger\"\r\n            >\r\n              🗑️\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nexport default function FlipCard(props) {\r\n  const initialCardState = {\r\n    id: 0,\r\n    front: \"\",\r\n    back: \"\",\r\n    deckId: 0,\r\n  };\r\n\r\n  const { cards } = props;\r\n  const sortedCards = cards.sort((cardA, cardB) => cardA.id - cardB.id);\r\n\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [currentCard, setCurrentCard] = useState({ ...initialCardState });\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n  const [displayedCardIndex, setDisplayedCardIndex] = useState(1);\r\n  const [cardIsFlipped, setCardIsFlipped] = useState(true);\r\n  const [endOfCardDeck, setEndOfCardDeck] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (sortedCards.length > 2) {\r\n      setCardIsFlipped(true);\r\n    }\r\n    setCurrentCard(sortedCards[currentCardIndex]);\r\n  }, [sortedCards, currentCardIndex]);\r\n\r\n  const cardFlipHandler = () => {\r\n    cardIsFlipped ? setCardIsFlipped(false) : setCardIsFlipped(true);\r\n  };\r\n\r\n  const nextCardHandler = () => {\r\n    setCardIsFlipped(false);\r\n    incrementCurrentCardAndIndexes();\r\n    if (cards.length <= displayedCardIndex) {\r\n      setEndOfCardDeck(true);\r\n      resetCardsTofirstIndexPrompt();\r\n    }\r\n  };\r\n\r\n  function incrementCurrentCardAndIndexes() {\r\n    setCurrentCardIndex((currentIndex) => currentIndex + 1);\r\n    setDisplayedCardIndex((currentDisplayedIndex) => currentDisplayedIndex + 1);\r\n    setCurrentCard(sortedCards[currentCardIndex + 1]);\r\n  }\r\n\r\n  function resetCardsTofirstIndexPrompt() {\r\n    if (window.confirm(`Restart cards?\\n\\nClick 'cancel' to return to the home page.`)) {\r\n      resetCardIndexesToInitialState();\r\n      resetEndOfDeckToInitialState();\r\n      changeRouteOnConfirmation(true);\r\n    } else {\r\n      resetEndOfDeckToInitialState();\r\n      changeRouteOnConfirmation(false);\r\n    }\r\n  }\r\n\r\n  function resetCardIndexesToInitialState() {\r\n    setCurrentCardIndex(0);\r\n    setDisplayedCardIndex(1);\r\n    setCurrentCard(sortedCards[currentCardIndex]);\r\n  }\r\n\r\n  function resetEndOfDeckToInitialState() {\r\n    return setEndOfCardDeck(false);\r\n  }\r\n\r\n  function changeRouteOnConfirmation(confirm) {\r\n    if (confirm) {\r\n      history.push(`/decks/${deckId}/study`);\r\n    } else {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n  function HandleAddCardButton(){\r\n    const url = `/decks/${deckId}/cards/new`;\r\n    history.push(url);\r\n  }\r\n\r\n  if (cards.length > 2 && currentCard) {\r\n    return (\r\n      <div className=\"container border p-3\">\r\n        <h4>\r\n          Card {displayedCardIndex} of {cards.length}\r\n        </h4>\r\n        {cardIsFlipped ? <p>{currentCard.front}</p> : <p>{currentCard.back}</p>}\r\n        <div className=\"row\">\r\n          <div className=\"p-3\">\r\n            <button className=\"btn btn-secondary\" onClick={cardFlipHandler}>\r\n              Flip\r\n            </button>\r\n          </div>\r\n          {!cardIsFlipped ? (\r\n            <div className=\"p-3\">\r\n              <button className=\"btn btn-primary\" onClick={nextCardHandler}>\r\n                Next\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if (!endOfCardDeck && cards.length <= 2) {\r\n    return (\r\n      <>\r\n        <h4>Not enough cards.</h4>\r\n        <p>\r\n          You need at least 3 cards to study. There{\" \"}\r\n          {cards.length < 2 ? \"is\" : \"are\"} {cards.length}{\" \"}\r\n          {cards.length < 2 ? \"card\" : \"cards\"} in this deck.\r\n        </p>\r\n        <button className=\"btn btn-primary\" onClick={HandleAddCardButton}>+Add Cards</button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { readDeck } from \"../utils/api\";\r\nimport { NavLink, useParams } from \"react-router-dom\";\r\nimport FlipCard from \"./FlipCard\";\r\n\r\nexport default function Study() {\r\n  const initialDeckState = {\r\n    id: 0,\r\n    name: \"\",\r\n    flipped: false,\r\n    description: \"\",\r\n    cards: [\r\n      {\r\n        id: 0,\r\n        front: \"\",\r\n        back: \"\",\r\n        flipped: false,\r\n      },\r\n    ],\r\n  };\r\n  const [studyDeck, setStudyDeck] = useState({ ...initialDeckState });\r\n  let { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function getStudyDeck() {\r\n      try{\r\n        const data = await readDeck(deckId);\r\n        setStudyDeck(data);\r\n      }\r\n      catch(error){\r\n        console.log(error);\r\n      }\r\n    }\r\n    getStudyDeck();\r\n  }, [deckId]);\r\n  return (\r\n    <>\r\n      <div id=\"navBar\" style={{ fontSize: \"14px\" }} className=\"bg-light p-2\">\r\n        <span>\r\n          🏠<NavLink to=\"/\">Home</NavLink> /{\" \"}\r\n          <NavLink to={`/decks/${deckId}`}>{studyDeck.name}</NavLink>{\" \"}\r\n          <span className=\"font-weight-light\"> / Study</span>\r\n        </span>\r\n      </div>\r\n      <h2>{studyDeck.name}: Study</h2>\r\n      <div className=\"card-body\">\r\n        <FlipCard cards={studyDeck.cards} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../utils/api\";\r\n\r\nexport default function CreateDeck() {\r\n  const initialDeckState = {\r\n    name: \"\",\r\n    description: \"\",\r\n};\r\n  \r\n  const history = useHistory();\r\n\r\n  function HandleCancelButton() {\r\n    const url = \"/\";\r\n    history.push(url);\r\n  }\r\n\r\n  const [ deck, setDeck ] = useState({...initialDeckState});\r\n\r\n  function HandleSubmitButton(event){\r\n    event.preventDefault();\r\n    createDeck(deck)\r\n    .then((response) => {\r\n      setDeck({...initialDeckState})\r\n      history.push(`/decks/${response.id}`);\r\n});\r\n};\r\n\r\n  function HandleDeckChange({target}){\r\n    setDeck({\r\n      ...deck,\r\n      [target.name]: target.value,\r\n  });\r\n};\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: \"14px\" }} className=\"nav-bar bg-light p-2\">\r\n        <span>\r\n          🏠<NavLink to=\"/\">Home</NavLink>\r\n          <span className=\"font-weight-light\"> / Create Deck</span>\r\n        </span>\r\n      </div>\r\n      <div className=\"create-deck\">\r\n        <h2>Create Deck</h2>\r\n        <form onSubmit={HandleSubmitButton}>\r\n          <div>\r\n            <label htmlFor=\"name\">Name</label>\r\n          </div>\r\n          <div>\r\n            <input\r\n            required\r\n              id=\"name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"Deck Name\"\r\n              onChange={HandleDeckChange}\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"description\">Description</label>\r\n          </div>\r\n          <div>\r\n            <textarea\r\n            required\r\n              id=\"description\"\r\n              name=\"description\"\r\n              type=\"text\"\r\n              placeholder=\"Brief description of the deck\"\r\n              onChange={HandleDeckChange}\r\n            ></textarea>\r\n          </div>\r\n          <div>\r\n            <button onClick={HandleCancelButton} className=\"btn btn-secondary\">\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { readDeck, deleteCard, deleteDeck} from \"../utils/api\";\r\nimport { NavLink, useParams, useHistory } from \"react-router-dom\";\r\n\r\nexport default function DeckScreen() {\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n  const [currentDeck, setCurrentDeck] = useState({ cards: [] });\r\n  const { cards } = currentDeck;\r\n  useEffect(() => {\r\n    async function getCurrentDeck() {\r\n      try {\r\n        const response = await readDeck(deckId);\r\n        setCurrentDeck(response);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getCurrentDeck();\r\n  }, [deckId]);\r\n\r\n\r\n  function HandleEditDeckButton(deckId) {\r\n    const url = `/decks/${deckId}/edit`;\r\n    history.push(url);\r\n  }\r\n\r\n  function HandleStudyButton(deckId) {\r\n    const studyDeckURL = `/decks/${deckId}/study`;\r\n    history.push(studyDeckURL);\r\n  }\r\n  function HandleAddButton(deckId) {\r\n    const studyDeckURL = `/decks/${deckId}/cards/new`;\r\n    history.push(studyDeckURL);\r\n  }\r\n  function HandleDeleteDeckButton(deckId) {\r\n    const message = `Delete this deck?\\n\\nYou will not be able to recover it.`;\r\n    if (window.confirm(message)) {\r\n      deleteDeck(deckId);\r\n      history.push(\"/\");\r\n      window.location.reload();\r\n    }\r\n  }\r\n  function HandleDeleteCardButton(cardId) {\r\n    const message = `Delete this card?\\n\\nYou will not be able to recover it.`;\r\n    if (window.confirm(message)) {\r\n      deleteCard(cardId);\r\n      window.location.reload();\r\n    }\r\n  }\r\n  function HandleEditCardButton(deckId, cardId){\r\n    const url = `/decks/${deckId}/cards/${cardId}/edit`;\r\n    history.push(url);\r\n  }\r\n  return (\r\n    <div>\r\n      <div style={{ fontSize: \"14px\" }} className=\"nav-bar bg-light p-2\">\r\n        <span>\r\n          🏠<NavLink to=\"/\">Home</NavLink>\r\n          <span className=\"font-weight-light\"> / {currentDeck.name}</span>\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <h4>{currentDeck.name}</h4>\r\n        <p>{currentDeck.description}</p>\r\n        <button\r\n          onClick={() => HandleEditDeckButton(deckId)}\r\n          className=\"btn btn-secondary m-1\"\r\n        >\r\n          ✏️Edit\r\n        </button>\r\n        <button\r\n          onClick={() => HandleStudyButton(deckId)}\r\n          className=\"btn btn-primary m-1\"\r\n        >\r\n          📖Study\r\n        </button>\r\n        <button\r\n          onClick={() => HandleAddButton(deckId)}\r\n          className=\"btn btn-primary m-1\"\r\n        >\r\n          +Add Cards\r\n        </button>\r\n        <button\r\n          style={{float: \"right\"}}\r\n          onClick={() => HandleDeleteDeckButton(deckId)}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          🗑️\r\n        </button>\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <h4>Cards</h4>\r\n        {cards.map((card) => (\r\n          <div key={card.id} className=\"d-flex flex-row border\">\r\n            <div className=\"col text-center\">\r\n              <p>{card.front}</p>\r\n            </div>\r\n            <div className=\"col text-center\">\r\n              <p>{card.back}</p>\r\n              <div style={{ marginLeft: \"50%\" }} className=\"row\">\r\n                <button onClick={()=>HandleEditCardButton(deckId,card.id)} className=\"btn btn-secondary mr-1\">✏️Edit</button>\r\n                <button onClick={()=>HandleDeleteCardButton(card.id)} className=\"btn btn-danger\">🗑️</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NavLink, useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../utils/api\";\r\n\r\nexport default function EditDeck() {\r\n  const initialFormState = {\r\n    name:\"\",\r\n    description:\"\"\r\n  }\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [currentDeck, setCurrentDeck] = useState({});\r\n  const [form, setForm] = useState({...initialFormState});\r\n  useEffect(() => {\r\n    async function getCurrentDeck() {\r\n      try {\r\n        const response = await readDeck(deckId);\r\n        setCurrentDeck(response);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getCurrentDeck();\r\n  }, [deckId]);\r\n\r\n  function HandleSubmitButton(event){\r\n    event.preventDefault();\r\n    updateDeck(currentDeck);\r\n    setForm({...initialFormState})\r\n    window.location.reload();\r\n  }\r\n  function HandleCancelButton(){\r\n    const url = `/decks/${deckId}`;\r\n    history.push(url);\r\n  }\r\n\r\n  function HandleFormChange({target}){\r\n    setCurrentDeck({...currentDeck,[target.name]:target.value})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: \"14px\" }} className=\"nav-bar bg-light p-2\">\r\n        <span>\r\n          🏠<NavLink to=\"/\">Home</NavLink> / \r\n          <NavLink to={`/decks/${deckId}`}>{currentDeck.name}</NavLink>\r\n          <span className=\"font-weight-light\"> / Edit Deck </span>\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <h3>Edit Deck</h3>\r\n        <form onSubmit={HandleSubmitButton}>\r\n          <div>\r\n            <label htmlFor=\"name\">Name</label>\r\n          </div>\r\n          <div>\r\n            <input\r\n              onChange={HandleFormChange}\r\n              id=\"name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder={currentDeck.name}\r\n              value={currentDeck.name}\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"description\">Description</label>\r\n          </div>\r\n          <div>\r\n            <textarea\r\n              onChange={HandleFormChange}\r\n              id=\"description\"\r\n              name=\"description\"\r\n              type=\"text\"\r\n              placeholder={currentDeck.description}\r\n              value={currentDeck.description}\r\n            ></textarea>\r\n          </div>\r\n          <div>\r\n            <button onClick={HandleCancelButton} className=\"btn btn-secondary\">Cancel</button>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Form({\r\n  formTitle,\r\n  HandleSubmit,\r\n  HandleDoneButton,\r\n  handleFormChange,\r\n  formPlaceholderOne,\r\n  formPlaceholderTwo,\r\n  formValueOne,\r\n  formValueTwo,\r\n  buttonName\r\n}) {\r\n  return (\r\n    <div>\r\n      <h3>{formTitle}</h3>\r\n      <form onSubmit={HandleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"front\">Front</label>\r\n        </div>\r\n        <div>\r\n          <textarea\r\n            onChange={handleFormChange}\r\n            id=\"front\"\r\n            name=\"front\"\r\n            type=\"text\"\r\n            placeholder={formPlaceholderOne}\r\n            defaultValue={formValueOne ? formValueOne : \"\"}\r\n          ></textarea>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"back\">Back</label>\r\n        </div>\r\n        <div>\r\n          <textarea\r\n            onChange={handleFormChange}\r\n            id=\"back\"\r\n            name=\"back\"\r\n            type=\"text\"\r\n            placeholder={formPlaceholderTwo}\r\n            defaultValue={formValueTwo ? formValueTwo : \"\"}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"mt-2\">\r\n          <button onClick={HandleDoneButton} className=\"btn btn-secondary mr-2\">\r\n            {buttonName}\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, createCard } from \"../utils/api\";\r\nimport Form from \"./Form\";\r\n\r\nexport default function AddCard() {\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n  const initialFormState = {\r\n    id: \"\",\r\n    front: \"\",\r\n    back: \"\",\r\n    deckId: \"\",\r\n  };\r\n\r\n  const [currentForm, setCurrentForm] = useState({ ...initialFormState });\r\n  const [currentDeck, setCurrentDeck] = useState({});\r\n\r\n  function HandleSubmit(event) {\r\n    event.preventDefault();\r\n    createCard(deckId, currentForm).then((response) => {\r\n      setCurrentForm({ ...initialFormState });\r\n    });\r\n    window.location.reload();\r\n  }\r\n  function handleFormChange({ target }) {\r\n    setCurrentForm({ ...currentForm, [target.name]: target.value });\r\n  }\r\n  function HandleDoneButton() {\r\n    const url = `/decks/${deckId}`;\r\n    history.push(url);\r\n  }\r\n  useEffect(() => {\r\n    async function getCurrentDeck() {\r\n      try {\r\n        const response = await readDeck(deckId);\r\n        setCurrentDeck(response);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getCurrentDeck();\r\n  }, [deckId]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: \"14px\" }} className=\"nav-bar bg-light p-2\">\r\n        <span>\r\n          🏠<NavLink to=\"/\">Home</NavLink> /\r\n          <NavLink to={`/decks/${deckId}`}>{currentDeck.name}</NavLink> / \r\n          <span className=\"font-weight-light\">Add Card</span>\r\n        </span>\r\n      </div>\r\n      <Form\r\n        formTitle={`${currentDeck.name}: Add Card`}\r\n        handleFormChange={handleFormChange}\r\n        HandleDoneButton={HandleDoneButton}\r\n        HandleSubmit={HandleSubmit}\r\n        formLabelOne={`Front`}\r\n        formPlaceholderOne={`Front side of card`}\r\n        formValueOne={`front`}\r\n        formLabelTwo={`Back`}\r\n        formPlaceholderTwo={`Back side of card`}\r\n        formValueTwo={`back`}\r\n        buttonName={`Done`}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// <h3>{currentDeck.name}: Add Card</h3>\r\n// <form onSubmit={HandleSubmit}>\r\n//   <div><label htmlFor=\"front\">Front</label></div>\r\n//   <div><textarea onChange={handleFormChange} id=\"front\" name=\"front\" type=\"text\" placeholder=\"Front side of card\"></textarea></div>\r\n//   <div><label htmlFor=\"back\">Back</label></div>\r\n//   <div><textarea onChange={handleFormChange} id=\"back\" name=\"back\" type=\"text\" placeholder=\"Back side of card\"></textarea></div>\r\n//   <div className=\"mt-2\">\r\n//     <button onClick={HandleDoneButton} className=\"btn btn-secondary mr-2\">Done</button>\r\n//     <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n//   </div>\r\n// </form>\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck, readCard, updateCard } from \"../utils/api\";\r\nimport { NavLink, useParams, useHistory } from \"react-router-dom\";\r\nimport Form from \"./Form\";\r\n\r\nexport default function EditCard() {\r\n  const { deckId, cardId } = useParams();\r\n  const initialFormState = {\r\n    id:cardId,\r\n    front:\"\",\r\n    back:\"\",\r\n    deckId:deckId\r\n  }\r\n  const history = useHistory();\r\n  const [currentForm, setCurrentForm] = useState({...initialFormState})\r\n  const [currentDeck, setCurrentDeck] = useState({});\r\n  const [currentCard, setCurrentCard] = useState({});\r\n  // const [updatedCard, setUpdatedCard] = useState({});\r\n  \r\n  useEffect(()=>{\r\n    readCard(cardId)\r\n    .then(setCurrentCard)\r\n    .catch(err=>console.log(err))\r\n  },[cardId])\r\n\r\n  useEffect(() => {\r\n    async function getCurrentDeck() {\r\n      try {\r\n        const response = await readDeck(deckId);\r\n        setCurrentDeck(response);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getCurrentDeck();\r\n  }, [deckId]);\r\n\r\n  function HandleSubmit(event){\r\n    event.preventDefault();\r\n    async function HandleSubmitChange(){\r\n      await updateCard(currentForm)\r\n      history.push(`/decks/${deckId}`);\r\n      // setCurrentForm({...initialFormState})\r\n    }\r\n    HandleSubmitChange();\r\n    console.log(\"current form is\",currentForm);\r\n    // window.location.reload();\r\n  }\r\n  function handleFormChange({target}){\r\n    setCurrentForm({...currentForm, id:cardId, [target.name]: target.value, deckId:Number(deckId)})\r\n  }\r\n  function HandleCancelButton(){\r\n    const url = `/decks/${deckId}`;\r\n    history.push(url);\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div>\r\n      <div style={{ fontSize: \"14px\" }} className=\"nav-bar bg-light p-2\">\r\n        <span>\r\n          🏠<NavLink to=\"/\">Home</NavLink>\r\n          <NavLink to={`/decks/${deckId}`}> / Deck {currentDeck.name}</NavLink>\r\n          <span className=\"font-weight-light\"> / Edit Card {cardId}</span>\r\n        </span>\r\n      </div>\r\n      <div>\r\n      <Form\r\n        formTitle={`Edit Card`}\r\n        handleFormChange={handleFormChange}\r\n        HandleDoneButton={HandleCancelButton}\r\n        HandleSubmit={HandleSubmit}\r\n        formLabelOne={`Front`}\r\n        formPlaceholderOne={currentCard.front}\r\n        formValueOne={currentCard.front}\r\n        formLabelTwo={`Back`}\r\n        formPlaceholderTwo={currentCard.back}\r\n        formValueTwo={currentCard.back}\r\n        buttonName={`Cancel`}\r\n      />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n        // <h2>Edit Card</h2>\r\n        // <form onSubmit={HandleSubmit}>\r\n        //   <div>\r\n        //     <label htmlFor=\"front\">Front</label>\r\n        //   </div>\r\n        //   <div>\r\n        //     <textarea\r\n        //       onChange={handleFormChange}\r\n        //       id=\"front\"\r\n        //       name=\"front\"\r\n        //       type=\"text\"\r\n        //       placeholder={currentCard.front}\r\n        //       value={currentCard.front}\r\n        //     ></textarea>\r\n        //   </div>\r\n        //   <div>\r\n        //     <label htmlFor=\"back\">Back</label>\r\n        //   </div>\r\n        //   <div>\r\n        //     <textarea\r\n        //       onChange={handleFormChange}\r\n        //       id=\"back\"\r\n        //       name=\"back\"\r\n        //       type=\"text\"\r\n        //       placeholder={currentCard.back}\r\n        //       value={currentCard.back}\r\n        //     ></textarea>\r\n        //   </div>\r\n        //   <div className=\"mt-2\">\r\n        //     <button\r\n        //       onClick={HandleCancelButton}\r\n        //       className=\"btn btn-secondary mr-2\"\r\n        //     >\r\n        //       Cancel\r\n        //     </button>\r\n        //     <button type=\"submit\" className=\"btn btn-primary\">\r\n        //       Save\r\n        //     </button>\r\n        //   </div>\r\n        // </form>","import Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport Study from \"./Study\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckScreen from \"./DeckScreen\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\nimport {\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport React from \"react\";\n\n\nfunction Layout() {\n\n  return (\n      <>\n        <Header />\n        <div className=\"container\">\n          <Switch>\n            {/* TODO: Implement the screen starting here */}\n            <Route exact path=\"/\">\n              <Home/>\n            </Route>\n            <Route exact path={\"/decks/new\"}>\n              <CreateDeck />\n            </Route>\n            <Route path={`/decks/:deckId/study`}>\n              <Study />\n            </Route>\n            <Route path=\"/decks/:deckId/edit\">\n              <EditDeck/>\n            </Route>\n            <Route  path=\"/decks/:deckId/cards/new\">\n              <AddCard />\n            </Route>\n            <Route path={`/decks/:deckId/cards/:cardId/edit`}>\n              <EditCard/>\n            </Route>\n            <Route exact path={\"/decks/:deckId\"}>\n              <DeckScreen />\n            </Route>\n            <Route>\n              <NotFound />\n            </Route>\n          </Switch>\n        </div>\n      </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}